<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo博客一键部署到GitHub</title>
    <url>/ZhiXingGe/2024/03/01/Hexo%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%88%B0GitHub/</url>
    <content><![CDATA[<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><p>安装插件 - hexo-deployer-git</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<h1 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h1><p>New repository -&gt; 配置对应的仓库名和仓库类型(Public,private) -&gt; Create repository</p>
<h1 id="3-添加配置"><a href="#3-添加配置" class="headerlink" title="3.添加配置"></a>3.添加配置</h1><p>在_config.yml中添加</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/Gaozengqing/HexoBlog</span><br><span class="line">  branch: gh-pages # 部署到的对应分支</span><br></pre></td></tr></table></figure></div>

<h1 id="4-部署"><a href="#4-部署" class="headerlink" title="4.部署"></a>4.部署</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行 hexo clean &amp;&amp; hexo deploy 。</span><br></pre></td></tr></table></figure></div>

<h1 id="5-查看效果"><a href="#5-查看效果" class="headerlink" title="5.查看效果"></a>5.查看效果</h1><p>在GitHub Pages中访问对应的网址，即可看到最终效果</p>
]]></content>
  </entry>
  <entry>
    <title>事件循环</title>
    <url>/ZhiXingGe/2024/03/04/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="事件循环-消息循环"><a href="#事件循环-消息循环" class="headerlink" title="事件循环(消息循环)"></a>事件循环(消息循环)</h1><h2 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h2><p>浏览器是一个<strong>多进程多线程</strong>的应用程序</p>
<h2 id="浏览器三个主要的进程"><a href="#浏览器三个主要的进程" class="headerlink" title="浏览器三个主要的进程"></a>浏览器三个主要的进程</h2><ol>
<li>浏览器进程</li>
<li>网络进程</li>
<li>渲染进程</li>
</ol>
<p>浏览器进程<br>主要负责界面显示，用户交互，子进程管理(一开始只有浏览器进程，下面两个进程是由浏览器进程启动的，所以下面两个称为浏览器进程的子进程)，浏览器进程内有多个线程处理不同的任务</p>
<p>网络进程<br>负责加载网络资源，网络进程内部会启动多个线程来处理不同的网络任务</p>
<p>渲染进程<br>渲染进程启动后,会开启一个渲染主线程，主线程负责执行HTML,CSS,JS代码<br>默认情况下，浏览器会为每个标签页开启一个新的渲染进程，保证不同的标签页之间不相互影响(未来这个默认可以会改变)</p>
<h2 id="渲染主线程如何工作"><a href="#渲染主线程如何工作" class="headerlink" title="渲染主线程如何工作"></a>渲染主线程如何工作</h2><p>渲染主线程是浏览器中最忙的线程(解析html,解析css,计算样式，布局，执行计时器的回调…)</p>
<p>主线程该如何进行任务调度?<br>排队</p>
<ol>
<li>在最开始的时候，渲染主进程进入一个死循环</li>
<li>每一次循环会检查消息队列中是否有任务存在，如果有，就取出第一个任务执行，执行完一个后进入下一次循环，如果没有，则进入休眠状态</li>
<li>其他线程(包括其他进程的线程)可以随时向消息队列添加任务，新任务会加到消息队列的末尾，在添加新任务时，如果主线程是休眠状态，则会将其唤醒以进行循环拿取任务</li>
</ol>
<p>若干解释？</p>
<p>何为异步？<br>计时(setTimeout)<br>网络通信(XHR)<br>用户操作(事件)</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ZhiXingGe/images/%E5%90%8C%E6%AD%A5.png"
                      alt="同步"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ZhiXingGe/images/%E5%BC%82%E6%AD%A5.png"
                      alt="异步"
                ></p>
<h2 id="js为何会阻碍渲染？"><a href="#js为何会阻碍渲染？" class="headerlink" title="js为何会阻碍渲染？"></a>js为何会阻碍渲染？</h2><h2 id="任务有优先级吗？"><a href="#任务有优先级吗？" class="headerlink" title="任务有优先级吗？"></a>任务有优先级吗？</h2><p>任务没有优先级，只能排队</p>
<p>但是消息队列有优先级</p>
<ol>
<li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属不同的队列，在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行</li>
<li>浏览器必须准备好一个微队列，微队列中的任务优先所有的任务执行</li>
</ol>
<p>随着浏览器的复杂度急剧提升，w3c不再使用宏队列的说法</p>
<p>在目前chrome的实现中,至少包含了下面的队列<br>延时队列：用于存放计时器到达后的回调任务，优先级 中<br>交互队列：用于存放操作后产生的事件处理任务，优先级 高<br>微队列：用户存放需要最快执行的任务，优先级 最高</p>
<p>添加任务到微队列的主要方式是使用Promise,MutationObserver</p>
<p>Promise.resolve().then(函数)</p>
<p>单线程是异步产生的原因<br>事件循环是异步的实现方式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ZhiXingGe/images/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3js%E7%9A%84%E5%BC%82%E6%AD%A5.png"
                      alt="如何理解js的异步"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ZhiXingGe/images/js%E8%AE%A1%E6%97%B6.png"
                      alt="js计时"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ZhiXingGe/images/js%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png"
                      alt="js的事件循环"
                ></p>
]]></content>
      <tags>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>导语</title>
    <url>/ZhiXingGe/2024/02/29/%E5%AF%BC%E8%AF%AD/</url>
    <content><![CDATA[<h1 id="搭建该博客的初衷"><a href="#搭建该博客的初衷" class="headerlink" title="搭建该博客的初衷"></a>搭建该博客的初衷</h1><pre><code>希望通过该站点能和大家进行知识分享,在记录的同时,把自己当时所思所想展示出来,最后希望可以网友们共同进步!

                                                                                    --- Gao Zeng Qing
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>操作手册</title>
    <url>/ZhiXingGe/2024/02/29/%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>深浅拷贝</title>
    <url>/ZhiXingGe/2024/03/04/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<p><strong>强调！深浅拷贝主要针对的是Object类型</strong></p>
<h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>深拷贝则是指完全复制对象或数组，包括其所有的嵌套属性或元素。</p>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ol>
<li>JSON.parse(JSON.stringify({a:1,b:{c:2}}))</li>
<li>lodash 的 _.cloneDeep() 方法</li>
<li>等等</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:&#123;<span class="attr">c</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> obj2=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br><span class="line">obj2.<span class="property">a</span>=<span class="number">3</span></span><br><span class="line">obj2.<span class="property">b</span>.<span class="property">c</span>=<span class="number">4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125; &#125;</span></span><br><span class="line"><span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125; &#125;</span></span><br><span class="line"><span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125; &#125;</span></span><br><span class="line"><span class="comment">// &#123; a: 3, b: &#123; c: 4 &#125; &#125;</span></span><br><span class="line"><span class="comment">// 可以看出ojb使用JSON.parse(JSON.stringify())完完全全克隆了一个独立的对象obj2，两者独立</span></span><br><span class="line"><span class="comment">// 但是不能处理函数和循环引用的对象，也不能复制特殊的对象</span></span><br></pre></td></tr></table></figure></div>


<h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><p>浅拷贝是指只复制对象或数组的第一层属性或元素，如果对象或数组的属性或元素也是对象或数组，那么复制的就只是这个对象或数组的引用，而不是对象或数组本身。</p>
<h2 id="实现方法-1"><a href="#实现方法-1" class="headerlink" title="实现方法"></a>实现方法</h2><ol>
<li>object.assign()</li>
<li>数组的slice()</li>
<li>数组的concat()</li>
<li>…运算符</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;bob&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">addr</span>:&#123;</span><br><span class="line">        <span class="attr">city</span>:<span class="string">&#x27;xxx市&#x27;</span>,</span><br><span class="line">        <span class="attr">privince</span>:<span class="string">&#x27;xxx县&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2=&#123;...obj&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);<span class="comment">//输出&#123; name: &#x27;bob&#x27;, age: 20, addr: &#123; city: &#x27;xxx市&#x27;, privince: &#x27;xxx县&#x27; &#125; &#125;</span></span><br><span class="line">obj2.<span class="property">name</span>=<span class="string">&#x27;tom&#x27;</span></span><br><span class="line">obj2.<span class="property">addr</span>.<span class="property">city</span>=<span class="string">&#x27;宜昌市&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">//输出&#123; name: &#x27;bob&#x27;, age: 20, addr: &#123; city: &#x27;宜昌市&#x27;, privince: &#x27;xxx县&#x27; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,&#123;<span class="attr">car</span>:<span class="string">&#x27;bmw&#x27;</span>,<span class="attr">num</span>:&#123;<span class="attr">city</span>:<span class="string">&#x27;xx市&#x27;</span>,<span class="attr">privince</span>:<span class="string">&#x27;yy县&#x27;</span>&#125;&#125;]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[ 1, &#123; car: &#x27;bmw&#x27;, num: &#123; city: &#x27;xx市&#x27;, privince: &#x27;yy县&#x27; &#125; &#125; ]</span></span><br><span class="line"><span class="keyword">var</span> arr5=[...arr]</span><br><span class="line">arr5[<span class="number">0</span>]=<span class="number">5</span></span><br><span class="line">arr5[<span class="number">1</span>].<span class="property">num</span>.<span class="property">city</span>=<span class="string">&#x27;宜昌市&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[ 1, &#123; car: &#x27;bmw&#x27;, num: &#123; city: &#x27;宜昌市&#x27;, privince: &#x27;yy县&#x27; &#125; &#125; ]</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// slice方法</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,&#123;<span class="attr">car</span>:<span class="string">&#x27;bmw&#x27;</span>,<span class="attr">num</span>:&#123;<span class="attr">city</span>:<span class="string">&#x27;xx市&#x27;</span>,<span class="attr">privince</span>:<span class="string">&#x27;yy县&#x27;</span>&#125;&#125;]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[ 1, &#123; car: &#x27;bmw&#x27;, num: &#123; city: &#x27;xx市&#x27;, privince: &#x27;yy县&#x27; &#125; &#125; ]</span></span><br><span class="line"><span class="keyword">var</span> arr3=arr.<span class="title function_">slice</span>()</span><br><span class="line">arr3[<span class="number">0</span>]=<span class="number">5</span></span><br><span class="line">arr3[<span class="number">1</span>].<span class="property">num</span>.<span class="property">city</span>=<span class="string">&#x27;宜昌市&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[ 1, &#123; car: &#x27;bmw&#x27;, num: &#123; city: &#x27;宜昌市&#x27;, privince: &#x27;yy县&#x27; &#125; &#125; ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// concat方法</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,&#123;<span class="attr">car</span>:<span class="string">&#x27;bmw&#x27;</span>,<span class="attr">num</span>:&#123;<span class="attr">city</span>:<span class="string">&#x27;xx市&#x27;</span>,<span class="attr">privince</span>:<span class="string">&#x27;yy县&#x27;</span>&#125;&#125;]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[ 1, &#123; car: &#x27;bmw&#x27;, num: &#123; city: &#x27;xx市&#x27;, privince: &#x27;yy县&#x27; &#125; &#125; ]</span></span><br><span class="line"><span class="keyword">var</span> arr4=arr.<span class="title function_">concat</span>()</span><br><span class="line">arr3[<span class="number">0</span>]=<span class="number">5</span></span><br><span class="line">arr3[<span class="number">1</span>].<span class="property">num</span>.<span class="property">city</span>=<span class="string">&#x27;宜昌市&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[ 1, &#123; car: &#x27;bmw&#x27;, num: &#123; city: &#x27;宜昌市&#x27;, privince: &#x27;yy县&#x27; &#125; &#125; ]</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.assign方法</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;bob&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">addr</span>:&#123;</span><br><span class="line">        <span class="attr">city</span>:<span class="string">&#x27;xxx市&#x27;</span>,</span><br><span class="line">        <span class="attr">privince</span>:<span class="string">&#x27;xxx县&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2=<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,obj)<span class="comment">//接收两个参数</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123; name: &#x27;bob&#x27;, age: 20, addr: &#123; city: &#x27;xxx市&#x27;, privince: &#x27;xxx县&#x27; &#125; &#125;</span></span><br><span class="line">obj2.<span class="property">name</span>=<span class="string">&#x27;tom&#x27;</span></span><br><span class="line">obj2.<span class="property">addr</span>.<span class="property">city</span>=<span class="string">&#x27;宜昌市&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">//&#123; name: &#x27;bob&#x27;, age: 20, addr: &#123; city: &#x27;宜昌市&#x27;, privince: &#x27;xxx县&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure></div>
<p>&#x2F;&#x2F; 总结：<br>&#x2F;&#x2F; …，slice,concat只复制对象或数组的第一层属性或元素<br>&#x2F;&#x2F; 如果这时对复制的第一层属性或数据操作不会影响到原对象或数组</p>
<h3 id="手写浅拷贝"><a href="#手写浅拷贝" class="headerlink" title="手写浅拷贝"></a>手写浅拷贝</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowClone</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> target === <span class="string">&#x27;object&#x27;</span> &amp;&amp; target !== <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> cloneTarget =<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) ?[] :&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">in</span> target)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target.<span class="title function_">hasOwnProperty</span>(prop))&#123;</span><br><span class="line">                cloneTarget[prop]=target[prop]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">car</span>:&#123;</span><br><span class="line">        <span class="attr">city</span>:<span class="string">&#x27;xxx市&#x27;</span>,</span><br><span class="line">        <span class="attr">province</span>:<span class="string">&#x27;yyy县&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> shallowCloneObj=<span class="title function_">shallowClone</span>(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shallowCloneObj === obj ); <span class="comment">// false，返回的是一个新对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shallowCloneObj.<span class="property">car</span> === obj.<span class="property">car</span>);<span class="comment">// true，对于对象类型只拷贝了引用</span></span><br></pre></td></tr></table></figure></div>]]></content>
  </entry>
  <entry>
    <title>React哲学</title>
    <url>/ZhiXingGe/2024/03/06/react/React%E5%93%B2%E5%AD%A6/</url>
    <content><![CDATA[<p> React 构建用户界面时，首先会把它分解成一个个 组件，然后，需要把这些组件连接在一起，使数据流经它们。</p>
<h2 id="从原型开始"><a href="#从原型开始" class="headerlink" title="从原型开始"></a>从原型开始</h2><h3 id="将UI拆解为组件层级结构"><a href="#将UI拆解为组件层级结构" class="headerlink" title="将UI拆解为组件层级结构"></a>将UI拆解为组件层级结构</h3><p>通俗来讲，就是将一个原型图,<strong>合理</strong>的拆分为多个组件</p>
<h3 id="使用React构建一个静态版本"><a href="#使用React构建一个静态版本" class="headerlink" title="使用React构建一个静态版本"></a>使用React构建一个静态版本</h3><p>通过拥有的组件层级结构，构建一个不带任何交互的 UI 渲染代码版本,经常是先构建一个静态版本比较简单，然后再一个个添加交互。<br>构建一个静态版本需要写大量的代码，并不需要什么思考; 但添加交互需要大量的思考，却不需要大量的代码。</p>
<h3 id="找出-UI-精简且完整的-state-表示"><a href="#找出-UI-精简且完整的-state-表示" class="headerlink" title="找出 UI 精简且完整的 state 表示"></a>找出 UI 精简且完整的 state 表示</h3><p>通俗说就是从静态版本中找出最小的state表示,而不是重复的定义相同功能的state<br>将 state 作为应用程序需要记住改变数据的最小集合。组织 state 最重要的一条原则是保持它 DRY（不要自我重复）</p>
<p>举个例子，如果你正在构建一个购物列表，你可将他们在 state 中存储为数组。如果你同时想展示列表中物品数量，不需要将其另存为一个新的 state。取而代之，可以通过读取你数组的长度来实现。</p>
<h4 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h4><p>随着时间推移 保持不变？是，便不是 state。<br>通过 props 从父组件传递？是，便不是 state。<br>是否可以基于已存在于组件中的 state 或者 props 进行计算？是，它肯定不是state！</p>
<h3 id="验证-state-应该被放置在哪里"><a href="#验证-state-应该被放置在哪里" class="headerlink" title="验证 state 应该被放置在哪里"></a>验证 state 应该被放置在哪里</h3><p>提示：React 使用单向数据流，通过组件层级结构从父组件传递数据至子组件。</p>
<p>通常情况下，可以直接放置 state 于它们共同的父组件。<br>也可以将 state 放置于它们父组件上层的组件。<br>如果找不到一个有意义拥有这个 state 的地方，单独创建一个新的组件去管理这个 state，并将它添加到它们父组件上层的某个地方。</p>
<h3 id="添加反向数据流"><a href="#添加反向数据流" class="headerlink" title="添加反向数据流"></a>添加反向数据流</h3><p>通过上面的步骤,你的state应该都是从父组件流向子组件(通过prop传递),那么现在想要改变状态，需要绑定事件并使用父组件传递的hook来修改,这时数据就是从子组件流向父组件</p>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React常用知识总结</title>
    <url>/ZhiXingGe/2024/03/06/react/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>本章节将介绍每天都会使用的 80% 的 React 概念</p>
<h1 id="React常用知识总结"><a href="#React常用知识总结" class="headerlink" title="React常用知识总结"></a>React常用知识总结</h1><h2 id="创建和嵌套组件"><a href="#创建和嵌套组件" class="headerlink" title="创建和嵌套组件"></a>创建和嵌套组件</h2><h3 id="创建一个函数式组件"><a href="#创建一个函数式组件" class="headerlink" title="创建一个函数式组件"></a>创建一个函数式组件</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>I&#x27;m a button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="嵌套到别的组件中"><a href="#嵌套到别的组件中" class="headerlink" title="嵌套到别的组件中"></a>嵌套到别的组件中</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to my app<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="添加标签和样式"><a href="#添加标签和样式" class="headerlink" title="添加标签和样式"></a>添加标签和样式</h2><h3 id="使用Jsx的方式来编写标签"><a href="#使用Jsx的方式来编写标签" class="headerlink" title="使用Jsx的方式来编写标签"></a>使用Jsx的方式来编写标签</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jsx比html更加严格，必须闭合标签</span></span><br></pre></td></tr></table></figure></div>

<p>在 React 中，可以使用 className 来指定一个 CSS 的 class</p>
<h3 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&#x27;avatar&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css文件</span></span><br><span class="line">.<span class="property">avatar</span> &#123;</span><br><span class="line">  border-<span class="attr">radius</span>: <span class="number">50</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;user.name&#125; //Vue中是用&#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="comment">//   style=&#123;&#123;&#125;&#125; 并不是一个特殊的语法，而是 style=&#123; &#125; JSX 大括号内的一个普通 &#123;&#125; 对象</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;&#125;&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<h2 id="渲染条件和列表"><a href="#渲染条件和列表" class="headerlink" title="渲染条件和列表"></a>渲染条件和列表</h2><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 if 语句根据条件引入 JSX：</span></span><br><span class="line"><span class="keyword">let</span> content;</span><br><span class="line"><span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">  content = <span class="language-xml"><span class="tag">&lt;<span class="name">AdminPanel</span> /&gt;</span></span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  content = <span class="language-xml"><span class="tag">&lt;<span class="name">LoginForm</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;content&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  for 循环 和 array 的 map() 函数 来渲染组件列表。</span></span><br><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&#x27;Cabbage&#x27;</span>, <span class="attr">isFruit</span>: <span class="literal">false</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&#x27;Garlic&#x27;</span>, <span class="attr">isFruit</span>: <span class="literal">false</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&#x27;Apple&#x27;</span>, <span class="attr">isFruit</span>: <span class="literal">true</span>, <span class="attr">id</span>: <span class="number">3</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ShoppingList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> listItems = products.<span class="title function_">map</span>(<span class="function"><span class="params">product</span> =&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">key</span>=<span class="string">&#123;product.id&#125;</span>  //<span class="attr">这里Key的用法和Vue中的用法一致</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">color:</span> <span class="attr">product.isFruit</span> ? &#x27;<span class="attr">magenta</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">darkgreen</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;product.title&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="对事件做出响应并更新界面"><a href="#对事件做出响应并更新界面" class="headerlink" title="对事件做出响应并更新界面"></a>对事件做出响应并更新界面</h2><h3 id="响应事件"><a href="#响应事件" class="headerlink" title="响应事件"></a>响应事件</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;You clicked me!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="响应事件并更新界面"><a href="#响应事件并更新界面" class="headerlink" title="响应事件并更新界面"></a>响应事件并更新界面</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先，从 React 引入 useState</span></span><br><span class="line"><span class="comment">// 你将从 useState 中获得两样东西：当前的 state（count），以及用于更新它的函数（setCount）。你可以给它们起任何名字，但按照惯例会像 [something, setSomething] 这样为它们命名。</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Clicked &#123;count&#125; times</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="使用Hook"><a href="#使用Hook" class="headerlink" title="使用Hook"></a>使用Hook</h3><p>以 use 开头的函数被称为 Hook。useState 是 React 提供的一个内置 Hook<br>Hook 比普通函数更为严格。只能在组件（或其他 Hook）的 顶层 调用 Hook。如果想在一个条件或循环中使用 useState，请提取一个新的组件并在组件内部使用它。</p>
<h2 id="在组件间共享数据"><a href="#在组件间共享数据" class="headerlink" title="在组件间共享数据"></a>在组件间共享数据</h2><p>React中每个组件都有自己独立的状态(Vue中也是如此)</p>
<h3 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h3><p>如果有多个相同的组件想要共享同一状态，那么就可以将这个状态提升到他们公共的父组件中，父组件以prop的方式分发状态给子组件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counters that update together<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* prop分发 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span> </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params">&#123; count, onClick &#125;</span>) &#123; <span class="comment">//&#123; count, onClick &#125;接受prop</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Clicked &#123;count&#125; times</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>IIFE</title>
    <url>/ZhiXingGe/2024/03/04/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/1/</url>
    <content><![CDATA[<h1 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h1><p>全称为“Immediately Invoked Function Expression”，意为“立即调用的函数表达式”。在前端开发中，IIFE 是一种常用的模式，用于创建独立的命名空间，防止全局作用域被污染，并允许我们使用严格模式来避免某些错误。<br>这种结构允许你定义一个函数，并立即调用它。由于这个函数是立即调用的，所以它不会返回一个值（或者返回 undefined），因此整个表达式的结果也是 undefined。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>命名空间隔离<ul>
<li>为代码提供了严格封闭的作用域，在里面定义的变量，函数不会与全局作用域中的变量，函数冲突， 避免全局作用域污染</li>
</ul>
</li>
<li>使用严格模式 <ul>
<li>在其内部可以使用严格模式(use strict) 可以帮助避免一些错误，如未声明的变量</li>
</ul>
</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>所有复用代码都混合在IIFE中，难以维护</li>
<li>功能模块与功能模块间的依赖不够清晰，一旦出现多个模块之间相互依赖的情况会引发混乱</li>
<li>IIFE中的代码只能以同步方式运行，代码过于复杂时会阻塞程序，影响性能</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span></span><br><span class="line">    <span class="keyword">var</span> privateVariable =<span class="string">&quot;This is private&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">privateFuntion</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(privateVariable)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">privateFuntion</span>()<span class="comment">//输出This is private</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// privateVariable和privateFuntion对外部不可见</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(privateVariable) <span class="comment">//报错</span></span><br><span class="line"> <span class="title function_">privateFuntion</span>()<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>名词解释</tag>
      </tags>
  </entry>
  <entry>
    <title>学习call,apply,bind的实现</title>
    <url>/ZhiXingGe/2024/03/02/%E6%89%8B%E5%86%99/call,apply,bind%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="学习call-apply-bind的实现"><a href="#学习call-apply-bind的实现" class="headerlink" title="学习call,apply,bind的实现"></a>学习call,apply,bind的实现</h1><p>引入：<br>我们先来看这样一个场景</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果Func函数想要通过this.value访问到obj中的value属性该怎么实现呢?</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//这里this.value得到的是undefined，因为this指向window(浏览器环境下)或global(node环境下)或undefined(严格模式下)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;访问到obj中的value属性&quot;</span>,<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你可能有这样的想法</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">1</span>，</span><br><span class="line">    <span class="title class_">Func</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这样做会让obj对象上多一个属性，显然不是很合适</span></span><br><span class="line"><span class="comment">//我们可以使用call来实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过call来改变Func的指向，这里指向的是obj,这样就可以访问到obj中value属性了</span></span><br><span class="line"><span class="title class_">Func</span>.<span class="title function_">call</span>(obj)</span><br></pre></td></tr></table></figure></div>

<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span>=<span class="keyword">function</span>(<span class="params">context</span>)&#123;</span><br><span class="line">    <span class="comment">// 如果插入的this为null或undefined时赋值为window或global</span></span><br><span class="line">    <span class="keyword">if</span>(!context)&#123;</span><br><span class="line">        context=<span class="keyword">typeof</span> <span class="variable language_">window</span> === <span class="string">&#x27;undefined&#x27;</span>? <span class="variable language_">global</span> :<span class="variable language_">window</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过this来获取调用call的函数</span></span><br><span class="line">    context.<span class="property">fn</span>=<span class="variable language_">this</span></span><br><span class="line">    <span class="comment">// 获取除this以外传递来的参数,从第二位开始到最后的一位</span></span><br><span class="line">    <span class="keyword">let</span> arrgs=[...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 隐式绑定，当前函数的this指向了context</span></span><br><span class="line">    <span class="keyword">let</span> result= context.<span class="title function_">fn</span>(...arrgs)</span><br><span class="line">    <span class="comment">// 删除创建的fn函数</span></span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="comment">// 结果返回</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value=<span class="number">2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params">arg1,arg2</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1,arg2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Func</span>.<span class="title function_">myCall</span>(obj,<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;456&#x27;</span>)  <span class="comment">//输出1 123 456</span></span><br><span class="line"><span class="title class_">Func</span>.<span class="title function_">myCall</span>(<span class="literal">null</span>,<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;456&#x27;</span>) </span><br><span class="line"><span class="comment">//浏览器环境下，输出 2 123,456</span></span><br><span class="line"><span class="comment">//node环境下，输出 undefined 123,456</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">apply的实现和call很类似,但是apply的第二个参数是数组或类数组</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span>=<span class="keyword">function</span>(<span class="params">context,arr</span>)&#123;</span><br><span class="line">    <span class="comment">// 如果插入的this为null或undefined时赋值为window或global</span></span><br><span class="line">    <span class="keyword">if</span>(!context)&#123;</span><br><span class="line">        context=<span class="keyword">typeof</span> <span class="variable language_">window</span> === <span class="string">&#x27;undefined&#x27;</span>? <span class="variable language_">global</span> :<span class="variable language_">window</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过this来获取调用call的函数</span></span><br><span class="line">    context.<span class="property">fn</span>=<span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> arrgs</span><br><span class="line">    <span class="keyword">if</span>(arr === <span class="literal">undefined</span>  || arr === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 当传入的数组是undefined或null时，不能使用展开运算符</span></span><br><span class="line">        arrgs=context.<span class="title function_">fn</span>(arr)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">        arrgs=context.<span class="title function_">fn</span>(...arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除创建的fn函数</span></span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="comment">// 结果返回</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value=<span class="number">2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params">arg1,arg2</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1,arg2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Func</span>.<span class="title function_">myCall</span>(obj,[<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;456&#x27;</span>])  <span class="comment">//输出1 123 456</span></span><br><span class="line"><span class="title class_">Func</span>.<span class="title function_">myCall</span>(<span class="literal">null</span>,[<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;456&#x27;</span>]) </span><br><span class="line"><span class="comment">//浏览器环境下，输出 2 123,456</span></span><br><span class="line"><span class="comment">//node环境下，输出 undefined 123,456</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span>=<span class="keyword">function</span>(<span class="params">context</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;not a function&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> self=<span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> arrgs=[...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="keyword">let</span> bound=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result=[...arrgs,...<span class="variable language_">arguments</span>]</span><br><span class="line">        context=<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Fn</span> ?<span class="variable language_">this</span> : context || <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="title function_">apply</span>(context,result)</span><br><span class="line">    &#125;</span><br><span class="line">    bound.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Fn</span>()</span><br><span class="line">    <span class="keyword">return</span> bound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="keyword">var</span> value=<span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params">arg1,arg2,arg3</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>,arg1,arg2,arg3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result=<span class="title class_">Func</span>.<span class="title function_">myBind</span>(obj,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)(<span class="string">&#x27;c&#x27;</span>) <span class="comment">//分多次传入参数</span></span><br><span class="line"><span class="comment">//输出2 &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><strong>call,apply</strong>是改变this指向后<strong>自动调用</strong>函数</li>
<li><strong>bind</strong>是创建一个新函数并且不会自动调用，需要<strong>手动调用</strong></li>
<li>bind传入的参数可以分多次传入</li>
<li>call,apply传入的参数需要一次性传入所有的参数</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>手写</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>整理this,闭包,作用域,上下文</title>
    <url>/ZhiXingGe/2024/03/02/%E7%88%AA%E5%93%87/1/</url>
    <content><![CDATA[<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>this的指向，是根据上下文，动态决定的</p>
<ul>
<li>简单调用时，this默认指向的是window&#x2F;global&#x2F;undefined (浏览器&#x2F;node&#x2F;严格模式)</li>
<li>对象调用时，绑定在对象上</li>
<li>使用call,bind,apply时，绑定在指定的参数上</li>
<li>使用new 关键字是，绑定到新创建的对象上</li>
<li>(以上三条优先级 new &gt; apply&#x2F;call&#x2F;bind &gt; 对象调用)</li>
<li>使用箭头函数，根据外层的规则决定</li>
</ul>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>函数嵌套函数，内层函数引用外层函数作用域下的变量，并且内层函数在全局作用域下可访问，就形成了闭包<br>知行上下文不等于词法作用域，闭包用来保存执行环境</p>
<p>立即执行函数表达式 (IIFE)</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = (<span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);  </span><br><span class="line">        <span class="keyword">return</span> i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;)();  </span><br><span class="line">  </span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">// 输出 0  </span></span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">// 输出 1  </span></span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">// 输出 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>构造函数和闭包</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getAge</span> = <span class="title class_">Child</span>();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="keyword">var</span> age = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> age++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> <span class="title class_">Father</span>();  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="title function_">getAge</span>()); <span class="comment">// 输出 0  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="title function_">getAge</span>()); <span class="comment">// 输出 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>使用闭包实现计数器</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> count++;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> counter = <span class="title function_">createCounter</span>();  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>()); <span class="comment">// 输出 0  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>()); <span class="comment">// 输出 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>是根据名称查找变量的规则</p>
<p>词法作用域<br>词法作用域就是写代码的时候，变量写在哪里，变量所处环境就是词法作用域<br>当词法分析器处理代码时，会保持作用域不变(eval,with除外)</p>
<p>还有<br>函数作用域<br>块作用域</p>
<h1 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h1><p>指的是函数执行时的环境。它决定了函数内部 this 的值，以及其他一些变量和函数的可见性。上下文可以影响函数的行为和结果。(动态作用域)</p>
]]></content>
      <categories>
        <category>爪哇</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象编程-原型，原型链</title>
    <url>/ZhiXingGe/2024/03/03/%E7%88%AA%E5%93%87/2/</url>
    <content><![CDATA[<h1 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h1><ol>
<li>Object.create()</li>
<li>{}</li>
<li>new</li>
</ol>
<h2 id="Object-create-和-的区别"><a href="#Object-create-和-的区别" class="headerlink" title="Object.create() 和 {}的区别"></a>Object.create() 和 {}的区别</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo=<span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;)  </span><br><span class="line"><span class="comment">//会多创建出来一层  foo.__proto__ === &#123;&#125;.prototype  </span></span><br><span class="line"><span class="comment">// 如果指向创建一层Object.create(Object.prototype)</span></span><br><span class="line"><span class="keyword">const</span> boo=&#123;&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">__proto__</span>=== <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">boo=__proto__=== <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create() 创建了一个对象</span></span><br><span class="line"><span class="comment">// let p = Object.create(q)  -&gt; p.__proto__=q</span></span><br><span class="line"><span class="comment">// 当我们使用p对象的一个方法或属性的时候，如果p上面没有就去q上面找</span></span><br></pre></td></tr></table></figure></div>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"><span class="comment">// new 创建一个对象，指向构造函数的原型</span></span><br><span class="line">p.<span class="property">__proto__</span> ===  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 构造函数上，有个原型(是个对象) 里面有constructor函数，就是这个构造函数</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span></span><br><span class="line"><span class="comment">// p对象的构造函数，是Person</span></span><br><span class="line">p.<span class="property">constructor</span> === <span class="title class_">Person</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="new-关键字到底干了什么"><a href="#new-关键字到底干了什么" class="headerlink" title="new 关键字到底干了什么"></a>new 关键字到底干了什么</h2><!-- 参考40行的代码 -->
<ul>
<li>创建一个对象</li>
<li>该对象的原型，指向这个Function的prototype</li>
<li>该对象实现了这个构造函数的方法<ul>
<li>如果没有返回值，则返回我创建的这个对象</li>
<li>如果有返回值，是一个对象，则返回该对象</li>
<li>如果有返回值，不是一个对象，则返回我创建的这个对象<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// const a= new A()  -&gt; a.__proto__ = A.prototype</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     a=Object.create(A.prototype)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手写new </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newFunc</span>(<span class="params">Father</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">Father</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;newFunc的第一个参数必须是一个函数&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj=<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="keyword">var</span> result=<span class="title class_">Father</span>.<span class="title function_">apply</span>(obj,<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> result &amp;&amp; <span class="keyword">typeof</span> result=== <span class="string">&#x27;object&#x27;</span> &amp;&amp; result!== <span class="literal">null</span> ? result :obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">const</span> p=<span class="title function_">newFunc</span>(<span class="title class_">Person</span>,name)<span class="comment">//Person是一个函数后面的是参数</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>实现一个继承，主要分为两个部分</p>
<ul>
<li>使用父类的构造函数方法和原型函数</li>
<li>让对象的原型指向父类</li>
</ul>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>=<span class="title class_">Child</span></span><br><span class="line"><span class="comment">// 隐含的问题</span></span><br><span class="line"><span class="comment">//1. 如果有属性是引用的属性，一旦某个实例修改这个属性，那么都会被修改</span></span><br><span class="line"><span class="comment">//2. 创建的Child的时候，是不能传参数的</span></span><br></pre></td></tr></table></figure></div>

<h3 id="构造函数的继承"><a href="#构造函数的继承" class="headerlink" title="构造函数的继承"></a>构造函数的继承</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span>=id</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 隐含的问题</span></span><br><span class="line"><span class="comment">// 1. 属性或者方法，想被继承的话，只能在构造函数中定义</span></span><br><span class="line"><span class="comment">// 2.如果方法在构造函数中定义了，每次都会创建</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>,<span class="number">1</span>))<span class="comment">//又执行了一次</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span>=id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Parent</span>()<span class="comment">//new Parent()执行一次</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>=<span class="title class_">Child</span></span><br></pre></td></tr></table></figure></div>

<h3 id="组合寄生式继承"><a href="#组合寄生式继承" class="headerlink" title="组合寄生式继承"></a>组合寄生式继承</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span>=id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有Object.create</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="comment">// 没有</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="title function_">inherit</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>=<span class="title class_">Child</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// const b=Objce.create(c)  -&gt; b.__proto__ = c</span></span><br><span class="line"><span class="comment">// b.__proto__ =function.prototype=c</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   function f()&#123;&#125;</span></span><br><span class="line"><span class="comment">//   f.prototype=c</span></span><br><span class="line"><span class="comment">//   return new f()</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现Object.create</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inherit</span>(<span class="params">p</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">null</span>) <span class="keyword">throw</span> <span class="title class_">TypeError</span>()</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property">create</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(p)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> t= <span class="keyword">typeof</span> p</span><br><span class="line">    <span class="keyword">if</span>(t!== <span class="string">&#x27;object&#x27;</span> &amp;&amp; t!== <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">TypeError</span>()</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    f.<span class="property"><span class="keyword">prototype</span></span>=p</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="组合寄生式继承-和-class继承有什么区别"><a href="#组合寄生式继承-和-class继承有什么区别" class="headerlink" title="组合寄生式继承 和 class继承有什么区别"></a>组合寄生式继承 和 class继承有什么区别</h3><ul>
<li>class 继承，会继承静态属性</li>
<li>子类中，必须在constructor调用super,因为子类自己的this对象，必须先通过父类的构造函数完成</li>
</ul>
]]></content>
      <categories>
        <category>爪哇</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise</title>
    <url>/ZhiXingGe/2024/03/04/%E7%88%AA%E5%93%87/3/</url>
    <content><![CDATA[<h1 id="Promise是什么"><a href="#Promise是什么" class="headerlink" title="Promise是什么"></a>Promise是什么</h1><ol>
<li>是一个构造函数</li>
<li>其接受一个函数，这个函数的参数是(resolve,reject)，参数也要求是函数</li>
<li>其返回的对象包含一个then函数，then函数接受两个参数，一般也是函数</li>
<li>我们在使用new 关键字调用Promise构造函数时，在结束时<br> 如果正确执行，调用resolve方法，将结果放在resolve的参数中运行,这个结果可以在后面的then中的第一个函数参数(onFulfilled)中拿到<br> 如果错误执行，调用reject方法，将错误信息放在resolve的参数中运行,这个结果可以在后面的then中的第二个参数(onRejected)中拿到</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSomeThing</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise1=<span class="title function_">getSomeThing</span>(<span class="string">&#x27;/api/xx&#x27;</span>)</span><br><span class="line">promise1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`the result is <span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">&#125;,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`the reason is <span class="subst">$&#123;err&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h1 id="Promise-的术语"><a href="#Promise-的术语" class="headerlink" title="Promise 的术语"></a>Promise 的术语</h1><p>(了解)</p>
<ol>
<li>promise是一个有 then 方法的对象或者是函数</li>
<li>thenable是一个有then方法的对象或者是函数</li>
<li>value 是promise状态成功时的值,也就是resolve的参数，表示结果的数据</li>
<li>reason时promise状态失败时的值，也就是reject的参数，表示拒绝的原因</li>
<li>exception是一个使用throw 抛出的异常值</li>
</ol>
<h1 id="为什么会有微任务"><a href="#为什么会有微任务" class="headerlink" title="为什么会有微任务"></a>为什么会有微任务</h1><p>调用栈并发量大的时候，微任务可以解决异步时机不可控的问题</p>
<h1 id="异步的实现手段"><a href="#异步的实现手段" class="headerlink" title="异步的实现手段"></a>异步的实现手段</h1><ul>
<li>事件回调</li>
<li>Ajax请求</li>
<li>Node API</li>
<li>setTimeout,setInterval</li>
</ul>
<h1 id="Promise-规范"><a href="#Promise-规范" class="headerlink" title="Promise 规范"></a>Promise 规范</h1><h2 id="Promise-的status"><a href="#Promise-的status" class="headerlink" title="Promise 的status"></a>Promise 的status</h2><ol>
<li>pending<br>初始的状态，可以改变，一个Promise在 resolve&#x2F;reject前都处于这个状态,我们可以通过调用resolve方法或reject方法，让这个Promise变成 fulfilled &#x2F;rejected状态</li>
<li>fulfilled<br>不可变状态，在resolve之后，变成这个状态，拥有一个value</li>
<li>rejected<br>不可变状态，在reject之后，变成这个状态，拥有一个reason</li>
</ol>
<h2 id="then-函数"><a href="#then-函数" class="headerlink" title="then 函数"></a>then 函数</h2><ol>
<li>参数<br>onFulfilled必须是函数类型，如果不是，应该被忽略<br>onRejected必须是函数类型，如果不是，应该被忽略<br>onFulfilled &#x2F;onRejected 特性<br>在promise变成 fufilled &#x2F;rejected 状态的时候，应该调用 onFulfilled &#x2F;onRejected<br>在promise变成 fulfilled &#x2F;rejected状态之前，不应该被调用<br>只能被调用一次</li>
</ol>
<h1 id="Promise的实现"><a href="#Promise的实现" class="headerlink" title="Promise的实现"></a>Promise的实现</h1><h2 id="Promise简易版"><a href="#Promise简易版" class="headerlink" title="Promise简易版"></a>Promise简易版</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">L0Promise</span>(<span class="params">execute</span>) &#123;</span><br><span class="line">    <span class="comment">// 准备初始数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span>=<span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span>=<span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span>=<span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span>=(<span class="params">value</span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span>=== <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">value</span>=value</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">status</span>=<span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> =(<span class="params">reason</span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span>=== <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reason</span>=reason</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">status</span>=<span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">execute</span>(resolve,reject)</span><br><span class="line">&#125;</span><br><span class="line">L0Promise.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span>=<span class="keyword">function</span>(<span class="params">onFulfilled,onRejected</span>)&#123;</span><br><span class="line">    onFulfilled= <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? <span class="attr">onFulfilled</span>:<span class="function"><span class="params">data</span>=&gt;</span> data</span><br><span class="line">    onRejected= <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? <span class="attr">onRejected</span>:<span class="function"><span class="params">error</span>=&gt;</span>&#123;<span class="keyword">throw</span> error&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> promise=<span class="keyword">new</span> <span class="title function_">L0Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 如果不进行异步操作那么会正确执行</span></span><br><span class="line">    <span class="comment">// resolve(&#x27;data&#x27;)</span></span><br><span class="line">    <span class="comment">// 如果有异步操作这里的data不会被输出</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为什么？</span></span><br><span class="line">    <span class="comment">// 因为当我们执行resolve的时候，onFulfilled函数已经执行过了</span></span><br><span class="line">    <span class="comment">// 方法？</span></span><br><span class="line">    <span class="comment">// 所以我们需要在一个合适的时间，去通知onFulfilled执行  (发布订阅)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h2 id="Promise完善版"><a href="#Promise完善版" class="headerlink" title="Promise完善版"></a>Promise完善版</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">L1Promise</span>(<span class="params">execute</span>) &#123;</span><br><span class="line">    <span class="comment">// 准备初始数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span>=<span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span>=<span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span>=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>=[]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedArray</span>=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span>=(<span class="params">value</span>)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if(this.status=== &#x27;pending&#x27;)&#123;</span></span><br><span class="line">        <span class="comment">//     this.value=value</span></span><br><span class="line">        <span class="comment">//     this.status=&#x27;fulfilled&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        <span class="comment">// 发布</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">value</span>=value</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span>=<span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">func</span>=&gt;</span><span class="title function_">func</span>(value))</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> =(<span class="params">reason</span>)=&gt;&#123;</span><br><span class="line">        <span class="comment">// if(this.status=== &#x27;pending&#x27;)&#123;</span></span><br><span class="line">        <span class="comment">//     this.reason=reason</span></span><br><span class="line">        <span class="comment">//     this.status=&#x27;rejected&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">reason</span>=reason</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span>=<span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedArray</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">func</span>=&gt;</span><span class="title function_">func</span>(value))</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">execute</span>(resolve,reject)</span><br><span class="line">&#125;</span><br><span class="line">L1Promise.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span>=<span class="keyword">function</span>(<span class="params">onFulfilled,onRejected</span>)&#123;</span><br><span class="line">    onFulfilled= <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? <span class="attr">onFulfilled</span>:<span class="function"><span class="params">data</span>=&gt;</span> data</span><br><span class="line">    onRejected= <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? <span class="attr">onRejected</span>:<span class="function"><span class="params">error</span>=&gt;</span>&#123;<span class="keyword">throw</span> error&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span>=== <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>.<span class="title function_">push</span>(onFulfilled)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedArray</span>.<span class="title function_">push</span>(onRejected)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> promise2=<span class="keyword">new</span> <span class="title function_">L1Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise2.<span class="title function_">then</span>(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;完善版&quot;</span>,result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h2 id="Promise链式调用"><a href="#Promise链式调用" class="headerlink" title="Promise链式调用"></a>Promise链式调用</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">L2Promise</span>(<span class="params">execute</span>) &#123;</span><br><span class="line">    <span class="comment">// 准备初始数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span>=<span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span>=<span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span>=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>=[]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedArray</span>=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span>=(<span class="params">value</span>)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if(this.status=== &#x27;pending&#x27;)&#123;</span></span><br><span class="line">        <span class="comment">//     this.value=value</span></span><br><span class="line">        <span class="comment">//     this.status=&#x27;fulfilled&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        <span class="comment">// 发布</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">value</span>=value</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span>=<span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">func</span>=&gt;</span><span class="title function_">func</span>(value))</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> =(<span class="params">reason</span>)=&gt;&#123;</span><br><span class="line">        <span class="comment">// if(this.status=== &#x27;pending&#x27;)&#123;</span></span><br><span class="line">        <span class="comment">//     this.reason=reason</span></span><br><span class="line">        <span class="comment">//     this.status=&#x27;rejected&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">reason</span>=reason</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span>=<span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedArray</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">func</span>=&gt;</span><span class="title function_">func</span>(value))</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">execute</span>(resolve,reject)</span><br><span class="line">&#125;</span><br><span class="line">L2Promise.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span>=<span class="keyword">function</span>(<span class="params">onFulfilled,onRejected</span>)&#123;</span><br><span class="line">    onFulfilled= <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? <span class="attr">onFulfilled</span>:<span class="function"><span class="params">data</span>=&gt;</span> data</span><br><span class="line">    onRejected= <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? <span class="attr">onRejected</span>:<span class="function"><span class="params">error</span>=&gt;</span>&#123;<span class="keyword">throw</span> error&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    <span class="keyword">let</span> promise2;  <span class="comment">//作为then函数的返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// onFulfilled(this.value)</span></span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        <span class="keyword">return</span> promise2= <span class="keyword">new</span> <span class="title function_">L2Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> result=   <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">                <span class="title function_">resolve</span>(result)</span><br><span class="line">              &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(error)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// onRejected(this.reason)</span></span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        <span class="keyword">return</span> promise2= <span class="keyword">new</span> <span class="title function_">L2Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> result=   <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">                <span class="title function_">resolve</span>(result)</span><br><span class="line">              &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(error)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span>=== <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">          <span class="comment">// this.onFulfilledArray.push(onFulfilled)</span></span><br><span class="line">        <span class="comment">// this.onRejectedArray.push(onRejected)</span></span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        <span class="keyword">return</span> promise2=<span class="keyword">new</span> <span class="title function_">L2Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>.<span class="title function_">push</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> result=<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">                    <span class="title function_">resolve</span>(result)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onRejectedArray</span>.<span class="title function_">push</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> result=<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">                    <span class="title function_">resolve</span>(result)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> promise3=<span class="keyword">new</span> <span class="title function_">L2Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise3.<span class="title function_">then</span>(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    <span class="keyword">return</span> result+<span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result2</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 这里会报错 因为上面没有返回Promise(resolve)不能用.then</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">promiseArrGenerator</span>=(<span class="params">num</span>)=&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Array</span>(num).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span><span class="function">()=&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(index)</span><br><span class="line">        &#125;,<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">100</span>)</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">const</span> proArr =<span class="title function_">promiseArrGenerator</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></div>


<h2 id="实现一个并发控制的promise"><a href="#实现一个并发控制的promise" class="headerlink" title="实现一个并发控制的promise"></a>实现一个并发控制的promise</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(proArr.<span class="title function_">map</span>(<span class="function"><span class="params">fn</span>=&gt;</span><span class="title function_">fn</span>()))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure></div>

<h2 id="顺序执行这些promise"><a href="#顺序执行这些promise" class="headerlink" title="顺序执行这些promise"></a>顺序执行这些promise</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">promiseChain</span>=(<span class="params">proArr</span>)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    proArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">proChain,pro</span>)=&gt;</span> proChain.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        ~res &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">pro</span>()</span><br><span class="line">    &#125;),<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(-<span class="number">1</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`the last one is <span class="subst">$&#123;res&#125;</span>`</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">promiseChain</span>(proArr)</span><br></pre></td></tr></table></figure></div>

<h2 id="并发量的处理"><a href="#并发量的处理" class="headerlink" title="并发量的处理"></a>并发量的处理</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">promisePipe</span>=(<span class="params">proArr,concurrent</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(concurrent &gt; proArr.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(proArr.<span class="title function_">map</span>(<span class="function"><span class="params">fn</span>=&gt;</span><span class="title function_">fn</span>())).<span class="title function_">then</span>(<span class="function"><span class="params">resArr</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(resArr))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> _arr=[...proArr]</span><br><span class="line">    <span class="comment">// 100个函数，10个并发</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; concurrent; i++) &#123;</span><br><span class="line">       <span class="keyword">let</span> fn=_arr.<span class="title function_">shift</span>()</span><br><span class="line">        <span class="title function_">run</span>(fn)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="title function_">fn</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            <span class="keyword">if</span>(_arr.<span class="property">length</span>) <span class="title function_">run</span>(_arr.<span class="title function_">shift</span>())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">promisePipe</span>(proArr,<span class="number">10</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>爪哇</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器相关知识</title>
    <url>/ZhiXingGe/2024/03/05/%E7%88%AA%E5%93%87/5/</url>
    <content><![CDATA[<h1 id="浏览器运行态下的js"><a href="#浏览器运行态下的js" class="headerlink" title="浏览器运行态下的js"></a>浏览器运行态下的js</h1><h2 id="包括-BOM-DOM-ECMAScript"><a href="#包括-BOM-DOM-ECMAScript" class="headerlink" title="包括 BOM,DOM,ECMAScript"></a>包括 BOM,DOM,ECMAScript</h2><p>ECMAScript 处理了基础逻辑,数据处理<br>BOM 对浏览器本身功能区域的汇总处理<br>DOM 对浏览器视窗内的HTML文本的相关操作</p>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p><a class="link"   href="https://www.gaozengqing.com/search?class=browser#comments" >https://www.gaozengqing.com/search?class=browser#comments <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li>origin <a class="link"   href="https://www.gaozengqing.com/" >https://www.gaozengqing.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>protocol https:</li>
<li>href <a class="link"   href="https://www.gaozengqing.com/search?class=browser#comments" >https://www.gaozengqing.com/search?class=browser#comments <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>host <a class="link"   href="http://www.gaozengqing.com/" >www.gaozengqing.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>port </li>
<li>pathname &#x2F;search</li>
<li>search ?class&#x3D;browser</li>
<li>hash #comments</li>
</ul>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li>assign(<code>$&#123;url&#125;</code>) &#x2F;&#x2F;跳转到指定path,替换pathname</li>
<li>replace(<code>$&#123;url&#125;</code>) &#x2F;&#x2F;同assign，同时替换掉浏览历史</li>
<li>reload()</li>
<li>toString() &#x2F;&#x2F;产出当前地址-&gt;字符串</li>
</ul>
<h4 id="面试场景"><a href="#面试场景" class="headerlink" title="面试场景"></a>面试场景</h4><p>   手写拆解路径题目<br>      location本身api操作<br>      url处理  正则</p>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><p>   state 存储当前页面状态</p>
<h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p>   pushState() 跳转到指定状态页上<br>   replaceState() 替换当前状态</p>
<h4 id="面试场景-1"><a href="#面试场景-1" class="headerlink" title="面试场景"></a>面试场景</h4><p>   路由history和hash模式的利弊分析(两种方式的考察，路径与浏览器渲染机制的联系)</p>
<h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><p>   userAgent &#x2F;&#x2F;获取当前用户环境信息</p>
<h4 id="面试方向"><a href="#面试方向" class="headerlink" title="面试方向"></a>面试方向</h4><p>   UA(userAgent)读取信息-&gt;浏览器兼容性<br>   剪切板 键盘操作 </p>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><p>面试方向<br>判断区域大小,方位</p>
<h4 id="innerHeight与innerWidth"><a href="#innerHeight与innerWidth" class="headerlink" title="innerHeight与innerWidth"></a>innerHeight与innerWidth</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// innerHeight</span></span><br><span class="line"><span class="comment">// 该属性是用来获取浏览器窗口视口的高度，如果有水平滚动条，也包括滚动条高度</span></span><br><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">var</span> viewPortHeight=<span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// innerWidth</span></span><br><span class="line"><span class="comment">// 该属性是用来获取浏览器窗口视口的宽度。如果有垂直滚动条，也包括滚动条的宽度。</span></span><br><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">var</span> viewPortWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ZhiXingGe/images/innerHeight%E5%92%8CinnerWidth.png"
                      alt="innerHeight和innerWidth"
                ></p>
<h4 id="clientHeight与clientWidth"><a href="#clientHeight与clientWidth" class="headerlink" title="clientHeight与clientWidth"></a>clientHeight与clientWidth</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// clientHeight包含内边距，但不包括边框、外边距和水平滚动条（如果存在）</span></span><br><span class="line"><span class="comment">// clientHeight 可以通过 CSS height + CSS padding - 水平滚动条高度（如果存在）来计算</span></span><br><span class="line"><span class="comment">//clientWidth包括内边距（padding），但不包括边框（border）、外边距（margin）和垂直滚动条（如果存在）。</span></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ZhiXingGe/images/clientHeight%E5%92%8CclientWidth.png"
                      alt="clientHeight和clientWidth"
                ></p>
<h4 id="offsetHeight与offsetWidth"><a href="#offsetHeight与offsetWidth" class="headerlink" title="offsetHeight与offsetWidth"></a>offsetHeight与offsetWidth</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// offsetHeight返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。</span></span><br><span class="line"><span class="comment">// offsetWidth 是包含元素的边框 (border)、水平线上的内边距 (padding)、竖直方向滚动条 (scrollbar)（如果存在的话）、以及 CSS 设置的宽度 (width) 的值。</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ZhiXingGe/images/offsetWidth%E5%92%8CoffsetHeight.png"
                      alt="offsetWidth和offsetHeight"
                ></p>
<h4 id="scrollHeight与scrollWidth"><a href="#scrollHeight与scrollWidth" class="headerlink" title="scrollHeight与scrollWidth"></a>scrollHeight与scrollWidth</h4><p>scrollHeight与scrollWidth 和 clientHeight与clientWidth相等</p>
<!--getBoundingClientRect 兼容性问题 ie会多出2px -->

<h2 id="Event事件模型"><a href="#Event事件模型" class="headerlink" title="Event事件模型"></a>Event事件模型</h2><p>捕获和冒泡</p>
<p>提示:addEventListener的第三个参数(是否使用捕获)默认是false</p>
<h4 id="如何阻止事件的传播"><a href="#如何阻止事件的传播" class="headerlink" title="如何阻止事件的传播"></a>如何阻止事件的传播</h4><p>   无论向上向下都是可以阻止的但是不能阻止默认事件的发生,例如a标签的跳转<br>   event.stopPropagation()</p>
<h4 id="如何阻止默认事件传播"><a href="#如何阻止默认事件传播" class="headerlink" title="如何阻止默认事件传播"></a>如何阻止默认事件传播</h4><p>   event.preventDefault()</p>
<h4 id="相同节点绑定多个同类事件，如何阻止"><a href="#相同节点绑定多个同类事件，如何阻止" class="headerlink" title="相同节点绑定多个同类事件，如何阻止"></a>相同节点绑定多个同类事件，如何阻止</h4><p>   event.stopImmediatePropagation()</p>
<h4 id="手写事件绑定"><a href="#手写事件绑定" class="headerlink" title="手写事件绑定"></a>手写事件绑定</h4><p>   attachEvent,addEventListener<br>   区别<br>   传参 attachEvent对于事件名加上on<br>   执行顺序 attachEvent是后绑定的先执行，addEventListener先绑定的先执行<br>   解绑 detachEvent removeEventListener<br>   阻断 e.cancelBubble &#x3D;true  e.stopPropagation()<br>   默认事件打断 e.returnValue e.preventDefault</p>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">bindEvent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">element</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span>=element</span><br><span class="line">    &#125;</span><br><span class="line">    addEventListener=<span class="function">(<span class="params">type,handler</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">addEventListener</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">addEventListener</span>(type,handler,<span class="literal">false</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">attachEvent</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> element=<span class="variable language_">this</span>.<span class="property">element</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span>+type,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                handler.<span class="title function_">call</span>(element)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>[<span class="string">&#x27;on&#x27;</span>+type]=handler</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    removeEventListener =<span class="function">(<span class="params">type,handler</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">removeEventListener</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">removeEventListener</span>(type,handler,<span class="literal">false</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">detachEvent</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> element=<span class="variable language_">this</span>.<span class="property">element</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">detachEvent</span>(<span class="string">&#x27;on&#x27;</span>+type,handler)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>[<span class="string">&#x27;on&#x27;</span>+type]=<span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">stopPropagation</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e.<span class="property">stopPropagation</span>)&#123;</span><br><span class="line">            e.<span class="title function_">stopPropagation</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            e.<span class="property">cancelBubble</span>=<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">preventDefault</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e.<span class="property">preventDefault</span>)&#123;</span><br><span class="line">            e.<span class="title function_">preventDefault</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            e.<span class="property">returnValue</span>=<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul <span class="keyword">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;content&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> list=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>)</span><br><span class="line"> <span class="keyword">var</span> li=list.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"> <span class="keyword">var</span> content=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.content&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般的情况下 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;li.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    li[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 优化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onClick</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> e=e || <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;li&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> liList=<span class="variable language_">this</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">        index=<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">indexOf</span>.<span class="title function_">call</span>(liList,e.<span class="property">target</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,onClick,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> xhr=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化连接</span></span><br><span class="line"><span class="comment">// xhr有一个open方法</span></span><br><span class="line"><span class="comment">// open 常用的3个参数 -method,url,async</span></span><br><span class="line">xhr.<span class="title function_">open</span>(method,url,<span class="keyword">async</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// send发送请求</span></span><br><span class="line"><span class="comment">// 内容post可以将请求体的参数传入,get可以不传or传入null</span></span><br><span class="line">xhr.<span class="title function_">send</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收</span></span><br><span class="line"><span class="comment">// xhr.readyStatus</span></span><br><span class="line"><span class="comment">// 0-尚未调用open</span></span><br><span class="line"><span class="comment">// 1-已调用open</span></span><br><span class="line"><span class="comment">// 2-已发送请求 (已调用send)</span></span><br><span class="line"><span class="comment">// 3-已接受到请求返回的数据</span></span><br><span class="line"><span class="comment">// 4-请求已完成</span></span><br><span class="line">xhr.<span class="property">onreadystatuschange</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyStatus</span>==<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;=<span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt;<span class="number">300</span> || xhr.<span class="property">status</span> == <span class="number">304</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求成功&quot;</span>,xhr.<span class="property">responseText</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置超时时间</span></span><br><span class="line">xhr.<span class="property">timeout</span>=<span class="number">5000</span></span><br><span class="line"></span><br><span class="line">xhr.<span class="property">ontimeout</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求超时&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="手写Ajax"><a href="#手写Ajax" class="headerlink" title="手写Ajax"></a>手写Ajax</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">async</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">payload</span>:<span class="string">&#x27;text&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>,res),<span class="function"><span class="params">err</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>,err))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ajax实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">options</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        url,</span><br><span class="line">        <span class="attr">method</span>:,</span><br><span class="line">        <span class="keyword">async</span>,</span><br><span class="line">        timeout,</span><br><span class="line">        data</span><br><span class="line">    &#125;=options</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化</span></span><br><span class="line">    <span class="keyword">const</span> xhr=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(timeout &amp;&amp; timeout &gt;<span class="number">0</span>)&#123;</span><br><span class="line">        xhr.<span class="property">timeout</span>=timeout</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 1.阶段态处理</span></span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">     xhr.<span class="property">onreadystatuschange</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyStatus</span>==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;=<span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt;<span class="number">300</span> || xhr.<span class="property">status</span> == <span class="number">304</span>)&#123;</span><br><span class="line">                   resolve &amp;&amp; <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   reject &amp;&amp; <span class="title function_">reject</span>() </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 失败</span></span><br><span class="line">        xhr.<span class="property">ontimeout</span>=<span class="function">()=&gt;</span>reject &amp;&amp; <span class="title function_">reject</span>(<span class="string">&quot;超时&quot;</span>)</span><br><span class="line">        xhr.<span class="property">onerror</span>=<span class="function">(<span class="params">err</span>)=&gt;</span>reject &amp;&amp; <span class="title function_">reject</span>(err)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.传参处理</span></span><br><span class="line">    <span class="keyword">let</span> _params=[]</span><br><span class="line">    <span class="keyword">let</span> encodeData</span><br><span class="line">    <span class="keyword">if</span>(data <span class="keyword">instanceof</span> <span class="title class_">Object</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">            <span class="comment">// 参数拼接</span></span><br><span class="line">            _params.<span class="title function_">push</span>(<span class="built_in">encodeURIComponent</span>(key)+ <span class="string">&#x27;=&#x27;</span> +<span class="built_in">encodeURIComponent</span>(data[key]))  </span><br><span class="line">            <span class="comment">//encodeURIComponent用于将字符串作为 URI组件进行编码</span></span><br><span class="line">            <span class="comment">// 功能 将一些特殊字符(如空格会转换为&#x27;%20&#x27;)转换为一个或多个十六进制的转义序列。这样，当这些字符被发送到服务器时，服务器可以正确地解析它们。</span></span><br><span class="line">        &#125;</span><br><span class="line">        encodeData= _params.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get 类型处理</span></span><br><span class="line">    <span class="keyword">if</span>(method === <span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> index= url.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(index === -<span class="number">1</span>) url +=<span class="string">&#x27;?&#x27;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(index !== url.<span class="property">length</span>-<span class="number">1</span>) url+=<span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">        url+=encodeData</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.初始化连接</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(method,url,<span class="keyword">async</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.发送</span></span><br><span class="line">    <span class="keyword">if</span>(method=== <span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">        xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        xhr.<span class="title function_">setRequestHeader</span>(</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;applicatoin/x-www-form-urlencoded;charset=UTF-8&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        xhr.<span class="title function_">send</span>(encodeData)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>手写</tag>
        <tag>js</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Js模块化</title>
    <url>/ZhiXingGe/2024/03/04/%E7%88%AA%E5%93%87/4/</url>
    <content><![CDATA[<h1 id="背景-为什么有模块化"><a href="#背景-为什么有模块化" class="headerlink" title="背景,为什么有模块化?"></a>背景,为什么有模块化?</h1><p>以前的js定位在简单的页面设计所以并没有模块化的概念，但是随着需求日益增长<br>js就需要模块化来管理复杂的文件关系</p>
<h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><p><strong>无-&gt;IIFE-&gt;CJS-&gt;AMD-&gt;CMD</strong></p>
<p>现代 拓扑组合</p>
<h3 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h3><p>参考 名称解释关于IIFE的介绍</p>
<h3 id="CJS"><a href="#CJS" class="headerlink" title="CJS"></a>CJS</h3><p>导出:<br>module.exports导出整个对象</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = obj</span><br></pre></td></tr></table></figure></div>
<p>module.exports单独导出每个key</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">b</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure></div>
<p>导入:<br>require</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=<span class="built_in">require</span>(<span class="string">&quot;./xxx.js&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p>从一个模块导出的对象是值而非地址(cjs,AMD,CMD都是如此)<br>在此提示一下:node语法不能直接被浏览器执行需要使用browserify进行打包</p>
<h3 id="AMD（Asynchronous-Module-Definition-异步模块定义）"><a href="#AMD（Asynchronous-Module-Definition-异步模块定义）" class="headerlink" title="AMD（Asynchronous Module Definition 异步模块定义）"></a>AMD（Asynchronous Module Definition 异步模块定义）</h3><p>诞生背景：因为cjs是为服务端服务，在cjs中模块是同步加载的(它的执行需要排队),如果模块越来越大那么会非常损耗性能<br>而AMD实现了模块的异步加载。正是来解决该问题的<br>导出:define</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([],<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">function</span> countPlus&#123;</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;count,countPlus&#125;  <span class="comment">//回调函数中返回的对象即为模块导出的对象。</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当这个模块要导入其他模块</span></span><br><span class="line"><span class="comment">// [&#x27;subModule&#x27;]导入</span></span><br><span class="line"><span class="comment">// subModule接收</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;subModule&#x27;</span>],<span class="keyword">function</span>(<span class="params">subModule</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">function</span> countPlus&#123;</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;count,countPlus,subModule&#125;  <span class="comment">//回调函数中返回的对象即为模块导出的对象。</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>导入:require</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AMD的异步是通过回调实现的毕竟是异步加载，因此并不直接接收返回值，而是传入一个回调函数，回调函数的参数即为所加载模块导出的对象</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;arg1&#x27;</span>,<span class="string">&#x27;arg2&#x27;</span>],<span class="keyword">function</span>(<span class="params">arg1,arg2</span>)&#123;</span><br><span class="line">    <span class="comment">//模块加载后的代码...</span></span><br><span class="line">    <span class="comment">// 在回调函数中执行模块加载后的代码，在外部执行无需模块依赖的代码，从而实现了异步。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>由于node默认是cjs规范所以可以使用node直接运行,而AMD想要在node&#x2F;浏览器上运行需要借助第三方库require.js</p>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>导入:require<br>导出:define<br>CMD的基本逻辑跟AMD是一致的，只不过在写法上CMD采用了cjs的部分语法，且CMD仅支持浏览器端使用,想要运行也要借助第三方库sea.js</p>
<h3 id="es"><a href="#es" class="headerlink" title="es"></a>es</h3><p>导出:export<br>导入:import</p>
<p><strong>具名导出</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countPlus</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; count, countPlus &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; count, countPlus &#125; <span class="keyword">from</span> <span class="string">&quot;./module/index.js&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">countPlus</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用具名方式导出时，引用的是地址，这与cjs、AMD、CMD都是不同的，使用的时候值得注意。</span></span><br><span class="line"><span class="comment">// 但是，如果使用default进行默认导出时，则与另外三者保持一致，使用的是值拷贝</span></span><br></pre></td></tr></table></figure></div>
<p><strong>默认导出</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countPlus</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;countPlus&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> count;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;countPlus&#125; <span class="keyword">from</span> <span class="string">&#x27;./module/index.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./module/index.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">countPlus</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">// 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>提示一下：es6规范的js文件后缀为mjs,commonjs的后缀为cjs</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了js模块化的四种方式，commonjs、AMD、CMD、es6模块：</p>
<p>nodejs直接支持commonjs和es6模块，浏览器端直接支持es6模块，其余情况下均需要第三方工具预编译或运行时支持<br>commonjs采用同步方式加载模块，而其余三者则使用异步方式对模块进行加载<br>commonjs、AMD和CMD模块导出的均是对象值的复制，而es6模块采用具名方式导出时导出的是地址，后者被导出内容在模块内发生变化时会反映到外部</p>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="script标签的两个参数-defer-async-的区别"><a href="#script标签的两个参数-defer-async-的区别" class="headerlink" title="script标签的两个参数(defer,async)的区别"></a>script标签的两个参数(defer,async)的区别</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&#x27;xxx&#x27;</span> type=<span class="string">&#x27;text/javascript&#x27;</span>&gt;&lt;<span class="regexp">/script&gt; /</span>/正常</span><br><span class="line">&lt;script src=<span class="string">&#x27;xxx&#x27;</span> type=<span class="string">&#x27;text/javascript&#x27;</span> <span class="keyword">async</span>&gt;&lt;<span class="regexp">/script&gt;/</span>/<span class="keyword">async</span></span><br><span class="line">&lt;script src=<span class="string">&#x27;xxx&#x27;</span> type=<span class="string">&#x27;text/javascript&#x27;</span> defer&gt;&lt;<span class="regexp">/script&gt;/</span>/defer</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>总结:<br>正常: 解析到标签，立即pending,并且下载且执行<br>defer:解析到标签开始异步下载,继续解析完成后开始执行<br>async:解析到标签开始异步下载,下载完成后立刻执行并且阻塞解析，执行完成后，再继续解析</p>
<p>缺点：兼容性</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ZhiXingGe/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240304201022.jpg"
                      alt="async与defer"
                ></p>
<h3 id="exports和module-exports的主要区别"><a href="#exports和module-exports的主要区别" class="headerlink" title="exports和module.exports的主要区别"></a>exports和module.exports的主要区别</h3><p>exports是module.exports的引用，两者指向同一个内存地址。<br>exports是一个对象，而module.exports可以是任何类型的值。<br>对module.exports的重新赋值会覆盖exports上的所有内容，但向module.exports添加新属性或方法也会出现在exports上。<br>当exports和module.exports指向不同对象时，以module.exports对象的导出结果为准。</p>
<h3 id="node模块加载机制"><a href="#node模块加载机制" class="headerlink" title="node模块加载机制"></a>node模块加载机制</h3><p>假设查找find.js</p>
<h4 id="当模块拥有路径但没有后缀时"><a href="#当模块拥有路径但没有后缀时" class="headerlink" title="当模块拥有路径但没有后缀时"></a>当模块拥有路径但没有后缀时</h4><p>模块查找规则：<br>首先在<strong>当前目录下查找find.js同名文件</strong>，如果找到就去执行这个同名的文件。<br>如果当前目录没有找到find.js文件，那么就去<strong>查找当前目录下的find目录</strong>，如果找到这个目录，就在当前<strong>find目录下查找index.js</strong>文件，如果找到index.js文件就去执行这个文件。<br>如果在find目录中没有找到index.js文件，就去当前find目录下的package.json文件中去查找main选项中的<strong>入口文件</strong>，如果找到入口文件就去执行它。<br>如果main选项中没有指定入口文件，或者指定的入口文件不存在，程序就会<strong>报错</strong>。</p>
<h4 id="当模块没有路径且没有后缀时-只写模块的名字"><a href="#当模块没有路径且没有后缀时-只写模块的名字" class="headerlink" title="当模块没有路径且没有后缀时(只写模块的名字)"></a>当模块没有路径且没有后缀时(只写模块的名字)</h4><p>模块查找规则：<br>首先，Node.js会假设它是系统模块，然后去<strong>系统模块中查找</strong>有没有find系统模块，如果有就去执行这个模块。<br>如果没有找到find模块，就去<strong>node_modules目录中查找有没有同名的.js文件</strong>，如果找到了这个同名的.js文件就去执行它。<br>如果在node_modules目录没有找到同名的.js文件，就在<strong>node_modules目录下查找有没有同名的find目录</strong>，如果找到这个目录，就在当前find<strong>目录下查找index.js</strong>文件，如果找到index.js文件就去执行这个文件。<br>如果find目录中没有找到index.js文件，就去当前find目录下的package.json文件中去查找main选项中的<strong>入口文件</strong>，如果找到入口文件就去执行它。<br>如果main选项中没有指定入口文件，或者指定的入口文件不存在，程序就会<strong>报错</strong>。</p>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>js性能优化</title>
    <url>/ZhiXingGe/2024/03/06/%E7%88%AA%E5%93%87/6/</url>
    <content><![CDATA[<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><p>当我们在地址栏输入url，发生了什么?</p>
<p>从我们输入到DNS域名解析再到web服务器最后进行浏览器渲染</p>
<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>会依次检查下面是否已经有了记录</p>
<ol>
<li><p>浏览器缓存</p>
</li>
<li><p>系统缓存</p>
</li>
<li><p>路由器缓存</p>
</li>
<li><p>运营商的各级缓存</p>
</li>
<li><p>根域名服务器</p>
<p>优化<br>CDN(Content Delivery Network)</p>
<ol>
<li>为同一个主键配置多个ip</li>
<li>就近就快</li>
<li>负载均衡 LB</li>
</ol>
</li>
</ol>
<h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><p>appache,nginx </p>
<ol>
<li>接收请求 传递给服务器的代码</li>
<li>反向代理 传递给其他服务器</li>
<li>不同域名 指定相同ip的服务器 &#x3D;》 nginx域名解析 &#x3D;》 引导到不同的服务监听端口</li>
</ol>
<p>提示:nginx可以配置跨域头</p>
<h3 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a>浏览器渲染</h3><p>Html通过HtmlParser解析为DOM结构<br>再与CssDom配合生成renderTree<br>renderTree配合js生成layout(布局)<br>最后paint(绘制)到页面</p>
<p>面试：<br>repaint(重绘) - 改变文本，颜色<br>reflow(重排) - 元素个数 几何尺寸发送变化</p>
<p>重排的开销比重绘的大<br>优化：<br>减少repaint,避免reflow</p>
<p>display:none &#x3D;&gt; reflow;<br>visibility:hidden &#x3D;&gt; repaint</p>
<p>http是应用层,tcp是传输层</p>
<p>htttp基于tcp实现连接,tcp连接特性(三次握手四次挥手)<br>http版本<br>1.0 -&gt; 1.1<br>keep-alive 保持的是tcp的连接状态 不用反复建立连接<br>1.1 -&gt; 2.0<br>多路复用无并发限制,http1.1版本chrome限制一次只能6个tcp连接<br>UDP&amp;TCP</p>
<p>状态 http无状态,tcp有状态<br>优化点<br>socket连接，是一个封装化的tcp，方便使用</p>
<p>https&#x3D;http+ssl(tls)  位于tcp和传输应用协议之间</p>
<p>https的实现原理</p>
<ol>
<li>客户端发起https连接请求</li>
<li>服务的返回一个公钥(证书)</li>
<li>客户端产生随机密钥(对称)</li>
<li>客户端使用公钥对对称密钥进行加密</li>
<li>客户端发送加密后的对称密钥</li>
<li>服务端收到后，响应客户端一下</li>
<li>客户端就可以通过对称加密的密钥进行密文通信</li>
</ol>
<p>https多次连接：导致网络请求加载事件延长，增加开销和功耗<br>可以通过合并请求+长连接</p>
<h4 id="前端网络优化"><a href="#前端网络优化" class="headerlink" title="前端网络优化"></a>前端网络优化</h4><p>手写并发控制 QPS-limit<br>面试：并发优化 10个请求，由于后台性能所限或者业务需求只能同时执行n个<br>分析：<br>输入 max参数<br>存储 taskQue<br>内容 执行 run 创建任务 createTask<br>唯一性 单例模式</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LimitPromise</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">max</span>)&#123;</span><br><span class="line">        <span class="comment">// 异步任务的并发上限</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_max</span>=max || <span class="number">6</span></span><br><span class="line">        <span class="comment">// 当前正在执行任务的数量</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_count</span>=<span class="number">0</span></span><br><span class="line">        <span class="comment">// 等待执行的任务队列</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_taskQueue</span>=[]</span><br><span class="line">        <span class="comment">// 单例模式复用</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span>=<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params">caller</span>)&#123;</span><br><span class="line">        <span class="comment">// 主入口</span></span><br><span class="line">        <span class="comment">// 输入 外部传入要添加的请求</span></span><br><span class="line">        <span class="comment">// 输出 返回队列处理的Promise</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> task=<span class="variable language_">this</span>.<span class="title function_">_createTask</span>(caller,resolve,reject)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 当前队列任务数量是否达到上限</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">_count</span>&gt;=<span class="variable language_">this</span>.<span class="property">_max</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_taskQueue</span>.<span class="title function_">push</span>(task)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">task</span>()</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="title function_">_createTask</span>(<span class="params">caller,resolve,reject</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">                    <span class="title function_">caller</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(res)</span><br><span class="line">                    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(err)</span><br><span class="line">                    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">_count</span>--</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">_taskQueue</span>.<span class="property">length</span>)&#123;</span><br><span class="line">                            <span class="comment">// 完成任务清出</span></span><br><span class="line">                            <span class="keyword">const</span> task=<span class="variable language_">this</span>.<span class="property">_taskQueue</span>.<span class="title function_">shift</span>()</span><br><span class="line">                            <span class="title function_">task</span>()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_count</span>++</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params">max</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">instance</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">instance</span>=<span class="keyword">new</span> <span class="title class_">LimiPromit</span>(max)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>js</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>html</title>
    <url>/ZhiXingGe/2024/03/07/base/h5c3/1/</url>
    <content><![CDATA[<h1 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h1><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p>ie Trident<br>firefox Gecko<br>Safari Webkit<br>chrome&#x2F;Opera Blink</p>
<h2 id="web标准是什么？"><a href="#web标准是什么？" class="headerlink" title="web标准是什么？"></a>web标准是什么？</h2><p>是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</p>
<h2 id="为什么要有web标准？"><a href="#为什么要有web标准？" class="headerlink" title="为什么要有web标准？"></a>为什么要有web标准？</h2><p>因为不同的浏览器他们显示页面或者排版有些差异，需要通过该标准来统一显示</p>
<h2 id="web标准的构成"><a href="#web标准的构成" class="headerlink" title="web标准的构成"></a>web标准的构成</h2><p>结构，表现，行为(html,css,js)</p>
]]></content>
  </entry>
</search>
